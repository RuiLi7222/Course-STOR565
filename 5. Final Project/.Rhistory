?fix.lambda
View(leaf.lasso)
library(MASS)
library(HDCI)
library('glmnet')
leaf.lasso = cv.glmnet(as.matrix(leaf[,-1]),leaf$margin1,fix.lambda=F)
View(leaf.lasso)
library(MASS)
library(HDCI)
library('glmnet')
leaf.lasso = glmnet(as.matrix(leaf[,-1]),leaf$margin1,fix.lambda=F)
library(MASS)
library(HDCI)
library('glmnet')
leaf.lasso = glmnet(as.matrix(leaf[,-1]),leaf$margin1,fix.lambda=F)
View(leaf.lasso)
lambda
coef.leaf.lasso = coef(leaf.lasso)
View(coef.leaf.lasso)
View(coef.leaf.lasso)
View(leaf.lasso)
sum(coef.leaf.lasso==0)
coef.leaf.lasso = coef(leaf.lasso)
library(MASS);library(HDCI);library('glmnet')
Y = leaf$margin1;X = leaf[,-1]
leaf.lasso = glmnet(as.matrix(X),Y,fix.lambda=F)
coef.leaf.lasso = coef(leaf.lasso)
View(leaf.lasso)
leaf.lasso$lambda
print(leaf.lasso$lambda)
View(leaf.lasso)
#load the data
data(mtcars)
#create design matrix
X = data.frame(disp = mtcars$disp, hp = mtcars$hp, wt = mtcars$wt, drat = mtcars$drat)
#create response
Y = mtcars$mpg
pairs(X)
linear.reg = lm(Y ~ disp + hp + wt + drat, data = X)
summary(linear.reg)
#construct a new design matrix
X.new = data.frame(X, two.hp = 2*X$hp)
#attempt to fit a linear model
linear.reg.fail = lm(Y ~ disp + hp + wt + drat + two.hp, data = X.new)
#summarize the regression
summary(linear.reg.fail)
library('MASS')
#run ridge regression with lambda = 1
ridge.reg.1 = lm.ridge(Y ~ disp + hp + wt + drat, data = X, lambda = 1)
#get a summary of the fit
coef.ridge.1 = coef(ridge.reg.1)
#calculate the magnitude of the estimated coefficient vector
dist.reg.1 = sum(abs(coef.ridge.1))
estimated_coefficients_lambda1 = as.double(coef.ridge.1)
magnitude_lambda1 = sum(abs(coef.ridge.1)*abs(coef.ridge.1))
cat("The estimated coefficients for the fitted model with lambda = 1 is ",estimated_coefficients_lambda1)
cat(", and the magnitude is ", magnitude_lambda1,".")
library('MASS')
#run ridge regression with lambda = 0
ridge.reg.0 = lm.ridge(Y ~ disp + hp + wt + drat, data = X, lambda = 0)
#get a summary of the fit
coef.ridge.0 = coef(ridge.reg.0)
#Calculate the coefficients and magnitude
estimated_coefficients_lambda0 = as.double(coef.ridge.0)
magnitude_lambda0 = sum(abs(coef.ridge.0)*abs(coef.ridge.0))
cat("The estimated coefficients for the fitted model with lambda = 0 is ",estimated_coefficients_lambda0)
cat(", and the magnitude is ", magnitude_lambda0,".")
for (lambda in c(10, 50, 100, 1000)) {
library('MASS')
ridge.reg = lm.ridge(Y ~ disp + hp + wt + drat, data = X, lambda = lambda)
coef.ridge= coef(ridge.reg)
#Calculate the coefficients and magnitude
estimated_coefficients_lambda = as.double(coef.ridge)
magnitude_lambda = sum(abs(coef.ridge)*abs(coef.ridge))
print(paste0("The estimated coefficient vector magnitude of lambda ",lambda," is ",magnitude_lambda,"."))
}
library('glmnet')
#conduct a cross validation study to fit minimum MSE model
lasso.fit.1 = glmnet(as.matrix(X),Y,lambda = 1)
#summarize the estimated coefficients
coef.lasso.1 = coef(lasso.fit.1)
#calculate the magnitude of estimated coefficients
dist.lasso.1 = sum(abs(coef.lasso.1))
lasso_coefficients_lambda1 = as.double(coef.lasso.1)
lasso_magnitude_lambda1 = dist.lasso.1
cat("The estimated coefficients for the fitted model with lambda = 1 is ",lasso_coefficients_lambda1)
cat(", and the magnitude is ", lasso_magnitude_lambda1,".")
#conduct a cross validation study to fit minimum MSE model
lasso.fit.0 = glmnet(as.matrix(X),Y,lambda = 0)
#summarize the estimated coefficients
coef.lasso.0 = coef(lasso.fit.0)
#calculate the magnitude of estimated coefficients
dist.lasso.0 = sum(abs(coef.lasso.0))
lasso_coefficients_lambda0 = as.double(coef.lasso.0)
lasso_magnitude_lambda0 = dist.lasso.0
cat("The estimated coefficients for the fitted model with lambda = 0 is ",lasso_coefficients_lambda0)
cat(", and the magnitude is ", lasso_magnitude_lambda0,".")
for (lambda in c(10,50,100,1000)) {
#conduct a cross validation study to fit minimum MSE model
lasso.fit = glmnet(as.matrix(X),Y,lambda = lambda)
#summarize the estimated coefficients
coef.lasso = coef(lasso.fit)
#calculate the magnitude of estimated coefficients
dist.lasso = sum(abs(coef.lasso))
print(paste0("The estimated coefficient vector magnitude of lambda ",lambda," is ",dist.lasso,"."))
}
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#
# BiocManager::install("bcellViper")
# install.packages("HDCI")
library(bcellViper)
data(bcellViper)
gene_expressions = data.frame(t(assayDataElement(dset,'exprs')))
linear.OLS = lm(ADA ~., data = gene_expressions)
sum.OLS = summary(linear.OLS)
Y = gene_expressions$ADA
X = gene_expressions[,-1]
lambdas = c(0.05, 0.10, 0.15, 0.20, 0.25)
nonzeros = c()
for (lambda in lambdas) {
#conduct a cross validation study to fit minimum MSE model
lasso.fit = glmnet(as.matrix(X),Y,lambda = lambda)
#summarize the estimated coefficients
coef.lasso = coef(lasso.fit)
nonzero_num = sum(coef.lasso!=0)
nonzeros = c(nonzeros,nonzero_num)
}
library(ggplot2)
ggplot(data =as.data.frame(t(rbind(nonzeros,lambdas))), aes(y=nonzeros, x = lambdas), formula = y~x)+geom_point(col = 'green') + ggtitle("Non-zero Coefficients vs Lambda") + labs(x = 'Lambda', y = 'Number of Non-zero Coefficients') + theme(plot.title = element_text(hjust = 0.5))
View(coef.lasso.1)
View(coef.lasso)
View(lasso.fit)
sum(coef(leaf.lasso)!=0)
View(X)
leaf = read.csv("leaves.csv")
leaf$id = NULL
leaf$species = NULL
View(leaf)
library(MASS);library(HDCI);library('glmnet')
Y = leaf$margin1;X = leaf[,-1]
leaf.lasso = glmnet(as.matrix(X),Y,fix.lambda=F)
View(X)
#load the data
data(mtcars)
#create design matrix
X = data.frame(disp = mtcars$disp, hp = mtcars$hp, wt = mtcars$wt, drat = mtcars$drat)
#create response
Y = mtcars$mpg
View(X)
leaf = read.csv("leaves.csv")
leaf$id = NULL
leaf$species = NULL
library(MASS);library(HDCI);library('glmnet')
Y = leaf$margin1;X = leaf[,-1]
leaf.lasso = glmnet(as.matrix(X),Y,fix.lambda=F)
print(leaf.lasso$lambda)
coef.lasso = coef(leaf.lasso)
nonzero_num = sum(coef.lasso!=0)
print(leaf.lasso$lambda)
coef.lasso = coef(leaf.lasso)
nonzero_num = sum(coef.lasso==0)
print(leaf.lasso$lambda)
coef.lasso = coef(leaf.lasso)
sum(coef.lasso!=0)
library(MXM)
install.packages("MXM")
library(MXM)
ridge.reg = ridgereg.cv(Y ~., data = leaf, lambda = 4)
library(MXM)
ridge.reg = ridgereg.cv(Y~., data = leaf, lambda = 4)
library(MXM)
ridge.reg = ridgereg.cv(Y~., data = leaf, lambda = 4)
library(MXM)
ridge.reg = ridgereg.cv(as.matrix(X),Y,data = leaf, lambda = 4)
?ridgereg.cv
library(MXM)
ridge.reg = ridgereg.cv(Y,data = X, lambda = 4)
library(MXM)
ridge.reg = ridgereg.cv(Y,data = X, lambda = seq(0.5,4, by=0.5))
leaf.ridge=lm.ridge(Y ~., data = X, lambda = 0.5)
View(leaf.ridge)
leaf.ridge=lm.ridge(Y ~., data = X, lambda = 0.5)
hist(coef(leaf.ridge))
set.seed(13)
x=matrix(rnorm(200*2) , ncol =2)
x[1:100 ,] = x[1:100 ,] + 2
x[101:150 ,]= x[101:150,] - 2
y=c(rep(1 ,150) ,rep(2 ,50) )
dat=data.frame(x=x,y=as.factor(y))
plot(x, col =y)
library(e1071)
train=sample(200 ,100)
svmfit = svm(y~., data=dat[train ,], kernel ="linear", gamma = 1, cost = 1)
plot(svmfit , dat)
library(e1071)
train=sample(200 ,100)
svmfit = svm(y~., data=dat[train ,], kernel ="radial", gamma = 1, cost = 1)
plot(svmfit , dat)
set.seed(13)
tune.out=tune(svm ,y~.,data=dat ,kernel ="linear",
ranges =list(cost=c(0.001,0.01,0.1, 1,5,10,100)))
summary(tune.out)
bestmod =tune.out$best.model
library(stringr)
leaf = read.csv("leaves.csv", stringsAsFactors = FALSE)
leaf$id = NULL
leaf$genus <- str_split(leaf$species, "_", simplify = TRUE)[, 1]
leaf$genus = as.factor(leaf$genus)
leaf$species = NULL
View(leaf)
plot(leaf$shape1,leaf$shape50,col=leaf$genus)
leaf$genus
plot(leaf$shape1,leaf$shape50,col=factor(leaf$genus))
factor(leaf$genus)
plot(leaf$shape1,leaf$shape50,col=factor(leaf$genus))
legend(7,4.3,unique(leaf$genus),col=1:length(leaf$genus),pch=1)
plot(leaf$shape1,leaf$shape50,col=factor(leaf$genus))
training_size <- round(.65 * nrow(leaf))
indices = sample(1:nrow(leaf), training_size)
training_set <- temp_data[indices,]
training_size <- round(.65 * nrow(leaf))
indices = sample(1:nrow(leaf), training_size)
training_set <- leaf[indices,]
testing_set <- leaf[-(indices),]
training_size <- round(.65 * nrow(leaf))
indices = sample(1:nrow(leaf), training_size)
training_set <- leaf[indices,]
testing_set <- leaf[-(indices),]
summary(training_set$genus)
library(MASS);library(HDCI);
Y = leaf$margin1;X = leaf[,-1]
leaf.lasso = Lasso(X,Y,fix.lambda=F)
leaf = read.csv("leaves.csv")
leaf$id = NULL
leaf$species = NULL
library(MASS);library(HDCI);
Y = leaf[,1];X = leaf[,-1]
leaf.lasso = Lasso(X,Y,fix.lambda=F)
print(leaf.lasso$lambda)
sum(leaf.lasso$beta!=0)
library(MXM)
ridge.reg = ridgereg.cv(Y,data = X, lambda = seq(0.5,4, by=0.5))
leaf.ridge=ridge.reg(Y, X, lambda = 0.5)
leaf.ridge=ridge.reg(Y, X, lambda = 0.5)
hist(leaf.ridge$beta)
leaf.ridge=ridge.reg(Y, X, lambda = 0.5)
hist(leaf.ridge$beta, main = "Histogram of the Estimated Coefficients")
library(stringr)
leaf = read.csv("leaves.csv", stringsAsFactors = FALSE)
leaf$id = NULL
leaf$genus <- str_split(leaf$species, "_", simplify = TRUE)[, 1]
leaf$genus = as.factor(leaf$genus)
leaf$species = NULL
library(ggplot2)
ggplot(leaf, aes(x = shape50, y = shape1, color = genus)) + geom_point()
tune.out=tune(svm ,genus~.,data=training_set ,kernel ="linear", ranges =list(cost=c(0.001,0.01,0.1, 1,5,10,100)))
summary(tune.out)
tune.out=tune(svm ,genus~.,data=training_set ,kernel ="linear", ranges =list(cost=c(0.001,0.01,0.1, 1,5,10,100)))
best_cost = tune.out$best.model$cost
print(paste0("The cost of the best model is "+best_cost+"."))
tune.out=tune(svm ,genus~.,data=training_set ,kernel ="linear", ranges =list(cost=c(0.001,0.01,0.1, 1,5,10,100)))
summary(tune.out)
best_cost = tune.out$best.model$cost
print(paste0("The cost of the best model is "+best_cost+"."))
best_cost = tune.out$best.model$cost
print(paste0("The cost of the best model is ",best_cost,"."))
test_pre = predict(bestmod,training_set[,1:192])
svm.pred.trn = predict(bestmod, training_set[,1:(ncol(training_set)-1)])
View(bestmod)
bestmod =tune.out$best.model
best_cost = bestmod$cost
print(paste0("The cost of the best model is ",best_cost,"."))
svm.pred.trn = predict(bestmod, training_set[,1:(ncol(training_set)-1)])
svm.pred.tst = predict(bestmod, testing_set[,1:(ncol(testing_set)-1)])
train_pre = predict(bestmod, training_set[,1:192])
test_pre = predict(bestmod, testing_set[,1:192])
train_error = sum(train_pre!=training_set$genus)/length(training_set$genus)
test_error = sum(test_pre!=testing_set$genus)/length(testing_set$genus)
train_error = sum(train_pre!=training_set$genus)/length(training_set$genus)
test_error = sum(test_pre!=testing_set$genus)/length(testing_set$genus)
print(paste0("The training error is ",train_error,"."))
print(paste0("The testing error is ",test_error,"."))
train_error = sum(train_pre!=training_set$genus)/length(training_set$genus)
test_error = 1-sum(test_pre==testing_set$genus)/length(testing_set$genus)
print(paste0("The training error is ",train_error,"."))
print(paste0("The testing error is ",test_error,"."))
train_pre = predict(bestmod, training_set[,1:(ncol(training_set)-1)])
test_pre = predict(bestmod, testing_set[,1:(ncol(testing_set)-1)])
train_error = sum(train_pre!=training_set$genus)/length(training_set$genus)
test_error = sum(test_pre!=testing_set$genus)/length(testing_set$genus)
print(paste0("The training error is ",train_error,"."))
print(paste0("The testing error is ",test_error,"."))
#Prepare for the data sheet
library(readxl)
PWE <- read_excel("~/FILES/UNC Research/UNC Research/Professor Newhall/6.FW__Epitope_Model/5.VXM2 Step 5/c. Count Mean and Sd. of Epitopes/Pairs with Effective Eplets.xlsx",
sheet = "Sheet2")
EPLETS = c()
for (i in 1:nrow(PWE)) {
for (j in 5:ncol(PWE)) {
if(!is.na(PWE[i,j])) {
EPLETS = c(PWE[i,j],EPLETS)
}
}
}
EPLETS = unique(EPLETS)
#Construct ME and SD
ME <- as.data.frame(matrix(NA, ncol = 213, nrow = 369))
names(ME) = c(names(PWE[,c(1:4)]), EPLETS)
ME[,c(1:4)]=PWE[,c(1:4)]
MIN=ME=CV
#Construct ME and SD
ME <- as.data.frame(matrix(NA, ncol = 213, nrow = 369))
names(ME) = c(names(PWE[,c(1:4)]), EPLETS)
ME[,c(1:4)]=PWE[,c(1:4)]
CV=MIN=ME
#Import the caculation needed data
library(readxl)
PEH <- read_excel("~/FILES/UNC Research/UNC Research/Professor Newhall/6.FW__Epitope_Model/5.VXM2 Step 5/c. Count Mean and Sd. of Epitopes/Paris with Effective Epitopes and HLAs.xlsx")
library(readr)
HLA_Value <- read_csv("~/FILES/UNC Research/UNC Research/Professor Newhall/6.FW__Epitope_Model/5.VXM2 Step 5/c. Count Mean and Sd. of Epitopes/HLAs with NormalValue.csv")
PWE_l <- read_excel("~/FILES/UNC Research/UNC Research/Professor Newhall/6.FW__Epitope_Model/5.VXM2 Step 5/c. Count Mean and Sd. of Epitopes/Pairs with Effective Eplets.xlsx")
#Calculate Mean and Standard Deviation
for (i in 1:nrow(ME)) {
for (j in 5:ncol(ME)) {
eplet_t = names(ME)[j]
if(!grepl(eplet_t,PWE_l$Eplets[i])){
ME[i,j]="Not Exist"
#MES[i,j]="Not Exist"
#SD[i,j]="Not Exist"
MIN[i,j]="Not Exist"
CV[i,j]="Not Exist"
} else {
hla_id = which((ME$Pairs.ID[i]==PEH$Pairs.ID)&(ME$Sample.ID[i]==PEH$Sample.ID))
value_id = which((ME$Pairs.ID[i]==HLA_Value$Pairs.ID)&(ME$Sample.ID[i]==HLA_Value$Sample.ID))
hla_r = PEH[hla_id,]
value_r = HLA_Value[value_id,]
data_t = c()
for (k in 1:ncol(hla_r)) {
if (!is.na(hla_r[k])){
if (grepl(eplet_t,hla_r[k])) {
if (!is.na(value_r[k])) {
data_t = c(value_r[k],data_t)
}
}
}
}
if (is.null(data_t)) {
ME[i,j] = "No Data"
#MES[i,j] = "No Data"
MIN[i,j] = "No Data"
CV[i,j]="No Data"
} else {
mean_l = mean(as.double(data_t))
sd_l = sd(as.double(data_t))
min_l = min(as.double(data_t))
ME[i,j]=mean_l
MIN[i,j]=min_l
if(!is.na(sd_l)){
cov_l = sd_l/mean_l
#if(cov_l<=0.2){ME[i,j]=mean_l}
#else{MES[i,j]=mean_l}
CV[i,j]=cov_l
}
}
}
}
}
write.csv(ME,"Average HLA Baseline")
write.csv(MIN,"Minimum HLA Baseline")
write.csv(CV,"CV HLA Baseline")
install.packages(c("corrplot", "MLmetrics", "neuralnet"))
knitr::opts_chunk$set(echo = TRUE)
wine <- read.csv('CombinedWine.csv')
setwd("C:/Users/Rui Li/Downloads")
setwd("~/FILES/UNC Course/STOR Major/STOR 565/5. Final Project")
wine <- read.csv('Combined Wine.csv')
library(readr)
wine <- read.csv('Combined Wine.csv')
library(readr)
wine <- read_csv('Combined Wine.csv')
setwd("C:/Users/Rui Li/Downloads")
library(readr)
wine <- read_csv('Combined Wine.csv')
setwd("~/FILES/UNC Course/STOR Major/STOR 565/5. Final Project")
library(readr)
wine <- read_csv('Combined Wine.csv')
setwd("~/FILES/UNC Course/STOR Major/STOR 565/5. Final Project")
library(readr)
wine <- read_csv('Combined Wine.csv')
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(neuralnet)
library(corrplot)
library(MLmetrics)
wine <- read.csv('Combined Wine.csv')
##wine type: Red - 1; White -2##
wine$Type <- as.factor(as.numeric(wine$Type))
wine <- wine[,-c(1,13)]
head(wine)
set.seed(233)
## Checking for missing data##
apply(wine, 2, function(x) sum(is.na(x)))  # no missing data
summary(wine)
ggplot(wine,aes(Type,fixed.acidity,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="Fixed acidity")
ggplot(wine,aes(Type,total.sulfur.dioxide,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="Total Sulphur Dioxide")
ggplot(wine,aes(Type,alcohol,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="Alcohol")
ggplot(wine,aes(Type,pH,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="pH")
ggplot(wine,aes(Type,residual.sugar,fill=Type))+geom_boxplot(outlier.colour = "red",outlier.shape = NA) + labs(x="Wine Type", y="residual.suagr")+scale_y_continuous(breaks = seq(0, 30, 5),limits=c(0, 30)) # higher acidity in white wine to blance higher sugar/sweetness in white wine
wine <- read.csv('Combined Wine.csv')
##wine type: Red - 1; White -2##
wine$Type <- as.factor(as.numeric(wine$Type))
wine <- wine[,-c(1,13)]
head(wine)
set.seed(233)
## Checking for missing data##
apply(wine, 2, function(x) sum(is.na(x)))  # no missing data
View(wine)
sum = summary(wine)
ggplot(wine,aes(Type,fixed.acidity,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="Fixed acidity")
ggplot(wine,aes(Type,total.sulfur.dioxide,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="Total Sulphur Dioxide")
ggplot(wine,aes(Type,alcohol,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="Alcohol")
ggplot(wine,aes(Type,pH,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="pH")
ggplot(wine,aes(Type,residual.sugar,fill=Type))+geom_boxplot(outlier.colour = "red",outlier.shape = NA) + labs(x="Wine Type", y="residual.suagr")+scale_y_continuous(breaks = seq(0, 30, 5),limits=c(0, 30)) # higher acidity in white wine to blance higher sugar/sweetness in white wine
sum
sum
summary(wine$fixed.acidity)
a = summary(wine$fixed.acidity)
a[1]
a[2]
summary(wine$volatile.acidity)
summary(wine$citric.acid)
summary(wine$residual.sugar)
summary(wine$chlorides)
summary(wine$free.sulfur.dioxide)
a = as.data.frame(sum)
View(a)
summary(wine$total.sulfur.dioxide)
summary(wine$density)
summary(wine$pH)
summary(wine$sulphates)
summary(wine$alcohol)
ggplot(wine)+geom_density(aes(x=total.sulfur.dioxide,color=Type))
mean(wine$total.sulfur.dioxide~wine$Type)
corrplot(cor(wine[1:11]),type="lower")  # Alcohol + Sugar + Water = Density Thats density and sugar and density and alcohol might be highly correlated
# Total SO2= BoundSO2 + Free SO2
ggplot(wine,aes(Type,volatile.acidity,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="volatile.acidity")
corrplot(cor(wine[1:11]),type="lower")
pairs(wine[1:11])
corrplot(cor(wine[1:11]),type="lower")  # Alcohol + Sugar + Water = Density Thats density and sugar and density and alcohol might be highly correlated
# Total SO2= BoundSO2 + Free SO2
pairs(wine[1:11])
View(a)
library(readr)
sta <- read_csv("Combined Wine.csv",
col_types = cols(`1st Qu` = col_double(),
`3rd Qu` = col_double(), Max. = col_double(),
Mean = col_double(), Median = col_double(),
Min. = col_double()))
View(Combined_Wine)
View(sta)
View(wine)
View(sta)
for (i in 1:nrow(sta)) {
sum = summary(sta[,i]);
}
for (i in 1:nrow(sta)) {
sum = summary(wine[,i])
sta$Min.[i]=sum[1]
sta$`1st Qu`[i]=sum[2]
sta$Median[i]=sum[3]
sta$Mean[i]=sum[4]
sta$`3rd Qu`[i]=sum[5]
sta$Max.[i]=sum[6]
}
write.csv(sta,"statistic summary.csv")
library(plyr)
count(wine$Type)
wine <- read.csv('Combined Wine.csv')
##wine type: Red - 1; White -2##
wine$Type <- as.factor(as.numeric(wine$Type))
wine <- read.csv('Combined Wine.csv')
##wine type: Red - 1; White -2##
wine$Type <- as.factor(as.numeric(wine$Type))
wine <- wine[,-c(1,13)]
head(wine)
set.seed(233)
## Checking for missing data##
apply(wine, 2, function(x) sum(is.na(x)))  # no missing data
sum = summary(wine)
ggplot(wine,aes(Type,total.sulfur.dioxide,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="Total Sulphur Dioxide")+ggtitle("Total Sulphur Dioxide", size = 30, bold=T)
sum = summary(wine)
ggplot(wine,aes(Type,total.sulfur.dioxide,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="Total Sulphur Dioxide")+ggtitle("Total Sulphur Dioxide")+ggtitle("Lateral Ventricles")+theme(plot.title = element_text(size = 30,hjust = 0.5, face = "bold"))
ggplot(wine,aes(Type,alcohol,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="Alcohol")
ggplot(wine,aes(Type,pH,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="pH")
ggplot(wine,aes(Type,residual.sugar,fill=Type))+geom_boxplot(outlier.colour = "red",outlier.shape = NA) + labs(x="Wine Type", y="residual.suagr")+scale_y_continuous(breaks = seq(0, 30, 5),limits=c(0, 30)) # higher acidity in white wine to blance higher sugar/sweetness in white wine
sum = summary(wine)
ggplot(wine,aes(Type,total.sulfur.dioxide,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="Total Sulphur Dioxide")+ggtitle("Total Sulphur Dioxide")+theme(plot.title = element_text(size = 30,hjust = 0.5, face = "bold"))
ggplot(wine,aes(Type,alcohol,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="Alcohol")+ggtitle("Alcohol")+theme(plot.title = element_text(size = 30,hjust = 0.5, face = "bold"))
ggplot(wine,aes(Type,pH,fill=Type))+geom_boxplot(outlier.colour = "red") + labs(x="Wine Type", y="pH")+ggtitle("PH")+theme(plot.title = element_text(size = 30,hjust = 0.5, face = "bold"))
ggplot(wine,aes(Type,residual.sugar,fill=Type))+geom_boxplot(outlier.colour = "red",outlier.shape = NA) + labs(x="Wine Type", y="residual.suagr")+scale_y_continuous(breaks = seq(0, 30, 5),limits=c(0, 30))+ggtitle("Residual Sugar")+theme(plot.title = element_text(size = 30,hjust = 0.5, face = "bold"))
ggplot(as.data.frame(combined_pcs$x))+geom_point(aes(x=combined_pcs$x[,4],y=combined_pcs$x[,1],color=wine$Type))+labs(x="PC4",y="PC1",title = "Plot of data projected onto PCs",color="Wine Type")+theme(plot.title = element_text(size = 30,hjust = 0.5, face = "bold"))
combined_pcs<-prcomp(wine[,1:11])
summary(combined_pcs)
screeplot(combined_pcs,type = "lines")
ggplot(as.data.frame(combined_pcs$x))+geom_point(aes(x=combined_pcs$x[,4],y=combined_pcs$x[,1],color=wine$Type))+labs(x="PC4",y="PC1",title = "Plot of data projected onto PCs",color="Wine Type")+theme(plot.title = element_text(size = 30,hjust = 0.5, face = "bold"))
ggplot(as.data.frame(combined_pcs$x))+geom_point(aes(x=combined_pcs$x[,6],y=combined_pcs$x[,1],color=wine$Type))+labs(x="PC6",y="PC1",title = "Plot of data projected onto PCs",color="Wine Type")+theme(plot.title = element_text(size = 30,hjust = 0.5, face = "bold"))
ggplot(as.data.frame(combined_pcs$x))+geom_point(aes(x=combined_pcs$x[,7],y=combined_pcs$x[,1],color=wine$Type))+labs(x="PC7",y="PC1",title = "Plot of data projected onto PCs",color="Wine Type")++theme(plot.title = element_text(size = 30,hjust = 0.5, face = "bold"))
ggplot(as.data.frame(combined_pcs$x))+geom_point(aes(x=combined_pcs$x[,4],y=combined_pcs$x[,1],color=wine$Type))+labs(x="PC4",y="PC1",title = "Plot of data projected onto PCs",color="Wine Type")+theme(plot.title = element_text(size = 30,hjust = 0.5, face = "bold"))
ggplot(as.data.frame(combined_pcs$x))+geom_point(aes(x=combined_pcs$x[,6],y=combined_pcs$x[,1],color=wine$Type))+labs(x="PC6",y="PC1",title = "Plot of data projected onto PCs",color="Wine Type")+theme(plot.title = element_text(size = 30,hjust = 0.5, face = "bold"))
ggplot(as.data.frame(combined_pcs$x))+geom_point(aes(x=combined_pcs$x[,7],y=combined_pcs$x[,1],color=wine$Type))+labs(x="PC7",y="PC1",title = "Plot of data projected onto PCs",color="Wine Type")+theme(plot.title = element_text(size = 30,hjust = 0.5, face = "bold"))
combined_proj<-combined_pcs$x[,1:7]
