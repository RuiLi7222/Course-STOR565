library(png)
library(grid)
img <- readPNG("jellies.png")
grid.raster(img)
# DON'T EDIT THIS CODE
set.seed(13)
has_acne = rbinom(100, 1, 0.4)
ate_red_jb = rbinom(100, 1, 0.6)
our_data = data.frame(HasAcne = has_acne, AteRedJB = ate_red_jb)
head(our_data)
summary(our_data)
View(our_data)
m1 <- glm(HasAcne ~ AteRedJB, data = our_data, family = binomial('logit'))
summary(m1)
# DO NOT EDIT THIS CODE
set.seed(10)
colors = c("Purple", "Brown", "Green", "Pink", "Blue", "Teal", "Salmon", "Red", "Turquoise",
"Magenta", "Yellow", "Grey", "Tan", "Cyan", "Mauve", "Beige",
"Lilac", "Black", "Peach", "Orange")
for(index in 1:20){
has_acne = rbinom(100, 1, 0.4)
ate_color_jb = rbinom(100, 1, 0.6)
our_data = data.frame(HasAcne = has_acne, AteJB = ate_color_jb)
fit <- glm(HasAcne ~ AteJB, data = our_data, family = binomial('logit'))
p_value = coef(summary(fit))[,"Pr(>|z|)"][2]
print(paste(colors[index], ": ",p_value < 0.05, sep = ""))
}
View(our_data)
?set.seed
set.seed(10)
colors = c("Purple", "Brown", "Green", "Pink", "Blue", "Teal", "Salmon", "Red", "Turquoise",
"Magenta", "Yellow", "Grey", "Tan", "Cyan", "Mauve", "Beige",
"Lilac", "Black", "Peach", "Orange")
for(index in 1:20){
has_acne = rbinom(100, 1, 0.4)
ate_color_jb = rbinom(100, 1, 0.6)
our_data = data.frame(HasAcne = has_acne, AteJB = ate_color_jb)
fit <- glm(HasAcne ~ AteJB, data = our_data, family = binomial('logit'))
p_value = coef(summary(fit))[,"Pr(>|z|)"][2]
p_adjust = p.adjust(p_value, method = "bonferroni")
print(paste(colors[index], ": ",p_adjust < 0.05, sep = ""))
}
set.seed(10)
colors = c("Purple", "Brown", "Green", "Pink", "Blue", "Teal", "Salmon", "Red", "Turquoise",
"Magenta", "Yellow", "Grey", "Tan", "Cyan", "Mauve", "Beige",
"Lilac", "Black", "Peach", "Orange")
for(index in 1:20){
has_acne = rbinom(100, 1, 0.4)
ate_color_jb = rbinom(100, 1, 0.6)
our_data = data.frame(HasAcne = has_acne, AteJB = ate_color_jb)
fit <- glm(HasAcne ~ AteJB, data = our_data, family = binomial('logit'))
p_value = coef(summary(fit))[,"Pr(>|z|)"][2]
p_adjust = p.adjust(p_value, method = "bonferroni")
print(paste(colors[index], ": ",p_adjust, sep = ""))
}
set.seed(10)
colors = c("Purple", "Brown", "Green", "Pink", "Blue", "Teal", "Salmon", "Red", "Turquoise",
"Magenta", "Yellow", "Grey", "Tan", "Cyan", "Mauve", "Beige",
"Lilac", "Black", "Peach", "Orange")
for(index in 1:20){
has_acne = rbinom(100, 1, 0.4)
ate_color_jb = rbinom(100, 1, 0.6)
our_data = data.frame(HasAcne = has_acne, AteJB = ate_color_jb)
fit <- glm(HasAcne ~ AteJB, data = our_data, family = binomial('logit'))
p_value = coef(summary(fit))[,"Pr(>|z|)"][2]
p_adjust = p.adjust(p_value, method = "bonferroni")
print(paste(colors[index], ": ",p_value, sep = ""))
}
set.seed(10)
colors = c("Purple", "Brown", "Green", "Pink", "Blue", "Teal", "Salmon", "Red", "Turquoise",
"Magenta", "Yellow", "Grey", "Tan", "Cyan", "Mauve", "Beige",
"Lilac", "Black", "Peach", "Orange")
for(index in 1:20){
has_acne = rbinom(100, 1, 0.4)
ate_color_jb = rbinom(100, 1, 0.6)
our_data = data.frame(HasAcne = has_acne, AteJB = ate_color_jb)
fit <- glm(HasAcne ~ AteJB, data = our_data, family = binomial('logit'))
p_value = coef(summary(fit))[,"Pr(>|z|)"][2]
p_adjust = p.adjust(p_value, method = "bonferroni")
print(paste(colors[index], ": ",p_adjust-p_value, sep = ""))
}
?p.adjust
set.seed(10)
colors = c("Purple", "Brown", "Green", "Pink", "Blue", "Teal", "Salmon", "Red", "Turquoise",
"Magenta", "Yellow", "Grey", "Tan", "Cyan", "Mauve", "Beige",
"Lilac", "Black", "Peach", "Orange")
for(index in 1:20){
has_acne = rbinom(100, 1, 0.4)
ate_color_jb = rbinom(100, 1, 0.6)
our_data = data.frame(HasAcne = has_acne, AteJB = ate_color_jb)
fit <- glm(HasAcne ~ AteJB, data = our_data, family = binomial('logit'))
p_value = coef(summary(fit))[,"Pr(>|z|)"][2]
p_adjust =round(p.adjust(p_value, method = "bonferroni"),3)
print(paste(colors[index], ": ",p_adjust-round(p_value,3), sep = ""))
}
set.seed(10)
colors = c("Purple", "Brown", "Green", "Pink", "Blue", "Teal", "Salmon", "Red", "Turquoise",
"Magenta", "Yellow", "Grey", "Tan", "Cyan", "Mauve", "Beige",
"Lilac", "Black", "Peach", "Orange")
for(index in 1:20){
has_acne = rbinom(100, 1, 0.4)
ate_color_jb = rbinom(100, 1, 0.6)
our_data = data.frame(HasAcne = has_acne, AteJB = ate_color_jb)
fit <- glm(HasAcne ~ AteJB, data = our_data, family = binomial('logit'))
p_value = coef(summary(fit))[,"Pr(>|z|)"][2]
p_adjust =round(p.adjust(p_value, method = "bonferroni"),3)
print(paste(colors[index], ": ",p_adjust, sep = ""))
}
set.seed(10)
colors = c("Purple", "Brown", "Green", "Pink", "Blue", "Teal", "Salmon", "Red", "Turquoise",
"Magenta", "Yellow", "Grey", "Tan", "Cyan", "Mauve", "Beige",
"Lilac", "Black", "Peach", "Orange")
for(index in 1:20){
has_acne = rbinom(100, 1, 0.4)
ate_color_jb = rbinom(100, 1, 0.6)
our_data = data.frame(HasAcne = has_acne, AteJB = ate_color_jb)
fit <- glm(HasAcne ~ AteJB, data = our_data, family = binomial('logit'))
p_value = coef(summary(fit))[,"Pr(>|z|)"][2]
p_adjust =round(p.adjust(p_value, method = "bonferroni"),3)
print(paste(colors[index], ": ",p_value, sep = ""))
}
set.seed(10)
colors = c("Purple", "Brown", "Green", "Pink", "Blue", "Teal", "Salmon", "Red", "Turquoise",
"Magenta", "Yellow", "Grey", "Tan", "Cyan", "Mauve", "Beige",
"Lilac", "Black", "Peach", "Orange")
for(index in 1:20){
has_acne = rbinom(100, 1, 0.4)
ate_color_jb = rbinom(100, 1, 0.6)
our_data = data.frame(HasAcne = has_acne, AteJB = ate_color_jb)
fit <- glm(HasAcne ~ AteJB, data = our_data, family = binomial('logit'))
p_value = coef(summary(fit))[,"Pr(>|z|)"][2]
p_adjust =p.adjust(p_value, method = "bonferroni")
print(paste(colors[index], ": ",p_adjust, sep = ""))
}
a = c(1,2,3,4)
a[1]
set.seed(10)
colors = c("Purple", "Brown", "Green", "Pink", "Blue", "Teal", "Salmon", "Red", "Turquoise",
"Magenta", "Yellow", "Grey", "Tan", "Cyan", "Mauve", "Beige",
"Lilac", "Black", "Peach", "Orange")
p_org = c()
for(index in 1:20){
has_acne = rbinom(100, 1, 0.4)
ate_color_jb = rbinom(100, 1, 0.6)
our_data = data.frame(HasAcne = has_acne, AteJB = ate_color_jb)
fit <- glm(HasAcne ~ AteJB, data = our_data, family = binomial('logit'))
p_value = coef(summary(fit))[,"Pr(>|z|)"][2]
#Bonferroni Correction
p_org = c(p_value,p_org)
}
p_adj =p.adjust(p_org, method = "bonferroni")
for (index in 1:20) {
print(paste(colors[index], ": ",p_adj[i], sep = ""))
}
set.seed(10)
colors = c("Purple", "Brown", "Green", "Pink", "Blue", "Teal", "Salmon", "Red", "Turquoise",
"Magenta", "Yellow", "Grey", "Tan", "Cyan", "Mauve", "Beige",
"Lilac", "Black", "Peach", "Orange")
p_org = c()
for(index in 1:20){
has_acne = rbinom(100, 1, 0.4)
ate_color_jb = rbinom(100, 1, 0.6)
our_data = data.frame(HasAcne = has_acne, AteJB = ate_color_jb)
fit <- glm(HasAcne ~ AteJB, data = our_data, family = binomial('logit'))
p_value = coef(summary(fit))[,"Pr(>|z|)"][2]
#Bonferroni Correction
p_org = c(p_value,p_org)
}
p_adj =p.adjust(p_org, method = "bonferroni")
for (index in 1:20) {
print(paste(colors[index], ": ",p_adj[index], sep = ""))
}
p_org
p_adj
set.seed(10)
colors = c("Purple", "Brown", "Green", "Pink", "Blue", "Teal", "Salmon", "Red", "Turquoise",
"Magenta", "Yellow", "Grey", "Tan", "Cyan", "Mauve", "Beige",
"Lilac", "Black", "Peach", "Orange")
p_org = c()
for(index in 1:20){
has_acne = rbinom(100, 1, 0.4)
ate_color_jb = rbinom(100, 1, 0.6)
our_data = data.frame(HasAcne = has_acne, AteJB = ate_color_jb)
fit <- glm(HasAcne ~ AteJB, data = our_data, family = binomial('logit'))
p_value = coef(summary(fit))[,"Pr(>|z|)"][2]
#Bonferroni Correction
p_org = c(p_value,p_org)
}
p_adj =p.adjust(p_org, method = "bonferroni")
for (index in 1:20) {
print(paste(colors[index], ": ",p_adj[index]<0.05, sep = ""))
}
# Make sure to install this package if you do not have it:
library(mvtnorm)
install.packages("mvtnorm")
# Make sure to install this package if you do not have it:
library(mvtnorm)
my_sigma = t(matrix(c(1:25), ncol=5)) %*% matrix(c(1:25), ncol=5)
data_0 = rmvnorm(250, mean = rep(1, times = 5), sigma = my_sigma)
data_1 = rmvnorm(250, mean = rep(-1, times = 5), sigma = my_sigma)
labels = c(rep(0, times = 250), rep(1, times = 250))
names = c("variable1", "variable2", "variable3", "variable4", "variable5", "labels")
full_data = rbind(data_0, data_1)
full_data = cbind(full_data, labels)
full_data = as.data.frame(full_data)
names(full_data) = names
View(full_data)
library(MASS)
library(dplyr)
full_lda = lda(labels~., data = full_data)
lda_predictions <- model_lda %>% predict(full_data)
library(MASS)
library(dplyr)
full_lda = lda(labels~., data = full_data)
lda_predictions <- full_lda %>% predict(full_data)
View(lda_predictions)
View(lda_predictions)
library(MASS)
library(dplyr)
full_lda = lda(labels~., data = full_data)
lda_predictions <- full_lda %>% predict(full_data)
lda_correct = sum(lda_predictions$class==full_data$labels)/length(full_data$labels)
library(MASS)
library(dplyr)
full_lda = lda(labels~., data = full_data)
lda_predictions <- full_lda %>% predict(full_data)
lda_correct = sum(lda_predictions$class==full_data$labels)/length(full_data$labels)
lda_correct
#Split the data set to testing data and training data
set.seed(13)
training_size <- round(.75 * nrow(full_data))  # training set size
indices = sample(1:nrow(full_data), training_size)
training_set <- full_data[indices,]
testing_set <- full_data[-(indices),]
View(testing_set)
#Split the data set to testing data and training data
set.seed(13)
training_size <- round(.75 * nrow(full_data))  # training set size
indices = sample(1:nrow(full_data), training_size)
training_set <- full_data[indices,]
testing_set <- full_data[-(indices),]
train_lda = lda(labels~., data = training_set)
train_predictions <- full_lda %>% predict(training_set)
train_correct = sum(train_predictions$class!=training_set$labels)/length(training_set$labels)
train_correct
#Split the data set to testing data and training data
set.seed(13)
training_size <- round(.75 * nrow(full_data))  # training set size
indices = sample(1:nrow(full_data), training_size)
training_set <- full_data[indices,]
testing_set <- full_data[-(indices),]
train_lda = lda(labels~., data = training_set)
train_predictions <- train_lda %>% predict(training_set)
train_correct = sum(train_predictions$class!=training_set$labels)/length(training_set$labels)
train_correct
train_lda = lda(labels~., data = training_set)
test_predictions <- train_lda %>% predict(testing_set)
test_error = sum(test_predictions$class!=testing_set$labels)/length(testing_set$labels)
test_error
#knn risk
library(class)
train_data_classifiers = as.factor(training_set$labels)
train_data_observations = training_set[,-6]
test_data_observations = testing_set[,-6]
test_data_classifiers = as.factor(testing_set$labels)
#k=1
knn.1 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=1)
knn.1_risk = sum(test_data_classifiers != knn.1)/length(knn.1)
#knn risk
library(class)
train_data_classifiers = as.factor(training_set$labels)
train_data_observations = training_set[,-6]
test_data_observations = testing_set[,-6]
test_data_classifiers = as.factor(testing_set$labels)
#k=1
knn.1 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=1)
knn.1_risk = sum(test_data_classifiers != knn.1)/length(knn.1)
knn.1_risk
#k=5
knn.5 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=5)
knn.5_risk = sum(test_data_classifiers != knn.1)/length(knn.1)
knn.5_risk
#k=11
knn.11 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=11)
knn.11_risk = sum(test_data_classifiers != knn.1)/length(knn.1)
knn.11_risk
#knn risk
library(class)
train_data_classifiers = as.factor(training_set$labels)
train_data_observations = training_set[,-6]
test_data_observations = testing_set[,-6]
test_data_classifiers = as.factor(testing_set$labels)
#k=1
knn.1 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=1)
knn.1_risk = sum(test_data_classifiers != knn.1)/length(knn.1)
knn.1_risk
#k=5
knn.5 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=5)
knn.5_risk = sum(test_data_classifiers != knn.5)/length(knn.5)
knn.5_risk
#k=11
knn.11 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=11)
knn.11_risk = sum(test_data_classifiers != knn.11)/length(knn.11)
knn.11_risk
library(MASS)
library(dplyr)
full_lda = lda(labels~., data = full_data)
lda_predictions <- full_lda %>% predict(full_data)
lda_error = sum(lda_predictions$class!=full_data$labels)/length(full_data$labels)
lda_error
