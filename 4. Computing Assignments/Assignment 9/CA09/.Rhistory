#Define the data size vector
size = c(5,10,25,50,100,200,500,1000,10000)
#Loop the data in vector size
for (data_size in size) {
my_sigma_1 = t(matrix(c(2,0.2,0.2,2)*0.6, ncol=2)) %*% matrix(c(2,0.2,0.2,2)*0.6, ncol=2)
my_sigma_2 = t(matrix(c(2,0.2,0.2,2), ncol=2)) %*% matrix(c(2,0.2,0.2,2), ncol=2)
data_0 = data.frame(rmvnorm(data_size, mean = rep(0, times = 2), sigma = my_sigma_1))
data_1 = data.frame(X1 = NA, X2 = NA)
count = 0
while(count < data_size){
new_draw = rmvnorm(1, mean = rep(0, times = 2), sigma = my_sigma_2)
if( sqrt( new_draw[,1]**2 + new_draw[,2]**2) >= 1.5 ) {
data_1 = rbind(data_1, data.frame(new_draw))
count = count + 1
}
}
data_1 = data_1[-1,]
my_data = data.frame(rbind(data_0, data_1))
my_data$class = as.factor(c(rep(0, times = data_size), rep(1, times = data_size)))
# Generate the "Strange Scatters" data using the given code
plot <- ggplot(my_data, aes(x = X1, y = X2, color = class)) + geom_point() +
ggtitle(paste0("Strange Scatters of data size ", data_size,"."))
print(plot)
}
library(MASS); library(dplyr)
training_size <- round(.75 * nrow(my_data))  # training set size
indices = sample(1:nrow(my_data), training_size)
training_set <- my_data[indices,]
testing_set <- my_data[-(indices),]
View(testing_set)
#Define the data size vector
size = c(5,10,25,50,100,200,500,1000,10000)
#Initiate the error rate of training and testing
lda_train = c(); k.1_train = c(); k.5_train = c(); k.11_train = c()
lda_test = c(); k.1_test = c(); k.5_test = c(); k.11_test = c()
#Loop the data in vector size
for (data_size in size) {
my_sigma_1 = t(matrix(c(2,0.2,0.2,2)*0.6, ncol=2)) %*% matrix(c(2,0.2,0.2,2)*0.6, ncol=2)
my_sigma_2 = t(matrix(c(2,0.2,0.2,2), ncol=2)) %*% matrix(c(2,0.2,0.2,2), ncol=2)
data_0 = data.frame(rmvnorm(data_size, mean = rep(0, times = 2), sigma = my_sigma_1))
data_1 = data.frame(X1 = NA, X2 = NA)
count = 0
while(count < data_size){
new_draw = rmvnorm(1, mean = rep(0, times = 2), sigma = my_sigma_2)
if( sqrt( new_draw[,1]**2 + new_draw[,2]**2) >= 1.5 ) {
data_1 = rbind(data_1, data.frame(new_draw))
count = count + 1
}
}
data_1 = data_1[-1,]
my_data = data.frame(rbind(data_0, data_1))
my_data$class = as.factor(c(rep(0, times = data_size), rep(1, times = data_size)))
# Generate the "Strange Scatters" data using the given code
plot <- ggplot(my_data, aes(x = X1, y = X2, color = class)) + geom_point() +
ggtitle(paste0("Strange Scatters of data size ", data_size,"."))
print(plot)
# Split the data into testing and training data sets
library(MASS); library(dplyr)
training_size <- round(.75 * nrow(my_data))  # training set size
indices = sample(1:nrow(my_data), training_size)
training_set <- my_data[indices,]
testing_set <- my_data[-(indices),]
# Build an LDA model and the KNN models for k=1,5,11 on the training data, predict the labels on the training/testing data, and calculate the training/testing error rate
## Build an LDA model
train_lda = lda(class~., data = training_set)
train_predictions <- train_lda %>% predict(training_set)
train_error = sum(train_predictions$class!=training_set$class)/length(training_set$class)
lda_train = c(lda_train,train_error)
test_predictions <- train_lda %>% predict(testing_set)
test_error = sum(test_predictions$class!=testing_set$class)/length(testing_set$class)
lda_test = c(lda_test,test_error)
##knn risk
library(class)
train_data_classifiers = as.factor(training_set$class)
train_data_observations = training_set[,-3]
test_data_observations = testing_set[,-3]
test_data_classifiers = as.factor(testing_set$class)
###Train k=1
knn.1 <-  knn(train_data_observations, train_data_observations, cl = train_data_classifiers, k=1)
knn.1_risk = sum(train_data_classifiers != knn.1)/length(knn.1)
k.1_train = c(k.1_train,knn.1_risk)
###Train k=5
knn.5 <-  knn(train_data_observations, train_data_observations, cl = train_data_classifiers, k=5)
knn.5_risk = sum(train_data_classifiers != knn.5)/length(knn.5)
k.5_train = c(k.5_train,knn.5_risk)
###Train k=1
knn.11 <-  knn(train_data_observations, train_data_observations, cl = train_data_classifiers, k=11)
knn.11_risk = sum(train_data_classifiers != knn.11)/length(knn.11)
k.11_train = c(k.11_train,knn.11_risk)
###Test k=1
knn.1 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=1)
knn.1_risk = sum(test_data_classifiers != knn.1)/length(knn.1)
k.1_test = c(k.1_test,knn.1_risk)
###Test k=5
knn.5 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=5)
knn.5_risk = sum(test_data_classifiers != knn.5)/length(knn.5)
k.5_test = c(k.5_test,knn.5_risk)
###Test k=11
knn.11 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=11)
knn.11_risk = sum(test_data_classifiers != knn.11)/length(knn.11)
k.11_test = c(k.11_test,knn.11_risk)
}
k.1_train
k.1_test
k.11_test
k.11_train
k.5_train
k.5_test
lda_train
lda_test
#Create Train data frame
train_data = data.frame(matrix(ncol = 5, nrow = 9))
View(train_data)
#Create Train data frame
train_data = data.frame(matrix(ncol = 5, nrow = 9))
names(train_data)=c("Data Size", "LDA Error Rate", "K.1 Error Rate", "K.5 Error Rate", "K.11 Error Rate")
#Create Train data frame
train_data = data.frame(matrix(ncol = 5, nrow = 9))
names(train_data)=c("Data_Size", "LDA_Error_Rate", "K.1_Error_Rate", "K.5_Error_Rate", "K.11_Error_Rate")
train_data$Data_Size = size
#Create Train data frame
train_data = data.frame(matrix(ncol = 5, nrow = 9))
names(train_data)=c("Data_Size", "LDA_Error_Rate", "K.1_Error_Rate", "K.5_Error_Rate", "K.11_Error_Rate")
train_data$Data_Size = size
train_data$LDA_Error_Rate = lda_train
train_data$K.1_Error_Rate = k.1_train
train_data$K.5_Error_Rate = k.5_train
train_data$K.11_Error_Rate = k.11_train
library(ggplot2)
df <- data.frame(size, lda_train, k.1_train, k.5_train, k.11_train)
library(reshape)
install.packages("reshape")
library(ggplot2)
df <- data.frame(size, lda_train, k.1_train, k.5_train, k.11_train)
library(reshape)
# This creates a new data frame with columns x, variable and value
# x is the id, variable holds each of our timeseries designation
df.melted <- melt(df, id = "size")
ggplot(data = df.melted, aes(x = size, y = value, color = variable)) +
geom_point()
#ggplot(df, aes(x=size, y = value, color = variable)) +
# geom_point(aes(y = y1, col = "y1")) +
#  geom_point(aes(y = y2, col = "y2"))
library(ggplot2); library(reshape)
#Plot train error rate
df <- data.frame(size, lda_train, k.1_train, k.5_train, k.11_train)
df.melted <- melt(df, id = "Data Size")
library(ggplot2); library(reshape)
#Plot train error rate
df <- data.frame(size, lda_train, k.1_train, k.5_train, k.11_train)
df.melted <- melt(df, id = "size")
ggplot(data = df.melted, aes(x = size, y = value, color = variable)) +
geom_point()
#Plot test error rate
df <- data.frame(size, lda_test, k.1_test, k.5_test, k.11_test)
df.melted <- melt(df, id = "size")
ggplot(data = df.melted, aes(x = size, y = value, color = variable)) +
geom_point()
library(ggplot2); library(reshape)
#Plot train error rate
df <- data.frame(size, lda_train, k.1_train, k.5_train, k.11_train)
df.melted <- melt(df, id = "size")
ggplot(data = df.melted, aes(x = size, y = value, color = variable)) +
geom_point()
#Plot test error rate
df <- data.frame(size, lda_test, k.1_test, k.5_test, k.11_test)
df.melted <- melt(df, id = "size")
ggplot(data = df.melted, aes(x = size, y = value, color = variable)) +
geom_point()
library(ggplot2); library(reshape)
#Plot train error rate
df_train <- data.frame(size, lda_train, k.1_train, k.5_train, k.11_train)
df_train.melted <- melt(df_train, id = "size")
ggplot(data = df_train.melted, aes(x = size, y = value, color = variable)) +
geom_point()
#Plot test error rate
df_test <- data.frame(size, lda_test, k.1_test, k.5_test, k.11_test)
df_test.melted <- melt(df, id = "size")
ggplot(data = df_test.melted, aes(x = size, y = value, color = variable)) +
geom_point()
train = data.frame(group = "Train", lda_train, k.1_train, k.5_train, k.11_train)
test = data.frame(group = "Test", lda_test, k.1_test, k.5_test, k.11_test)
plot.data = rbind(train, test) # this function will bind or join the rows. See data at bottom.
a.ta = data.frame(group = "LDA", value = lda_train)
b.ta = data.frame(group = "K.1", value = k.1_train)
c.ta = data.frame(group = "K.5", value = k.5_train)
d.ta = data.frame(group = "K.11", value = k.11_train)
plot.data.ta = rbind(a.ta, b.ta, c.ta, d.ta)
ggplot(plot.data.ta, aes(x=group, y=value, fill=group)) +  # This is the plot function
geom_boxplot()      # This is the geom for box plot in ggplot.
a.ta = data.frame(group = "LDA", value = lda_train)
b.ta = data.frame(group = "K.1", value = k.1_train)
c.ta = data.frame(group = "K.5", value = k.5_train)
d.ta = data.frame(group = "K.11", value = k.11_train)
plot.data.ta = rbind(a.ta, b.ta, c.ta, d.ta)
ggplot(plot.data.ta, aes(x=group, y=value)) +  # This is the plot function
geom_boxplot(col="red")      # This is the geom for box plot in ggplot.
a.ta = data.frame(group = "LDA", value = lda_train)
b.ta = data.frame(group = "K.1", value = k.1_train)
c.ta = data.frame(group = "K.5", value = k.5_train)
d.ta = data.frame(group = "K.11", value = k.11_train)
a.te = data.frame(group = "LDA", value = lda_test)
b.te = data.frame(group = "K.1", value = k.1_test)
c.te = data.frame(group = "K.5", value = k.5_test)
d.te = data.frame(group = "K.11", value = k.11_test)
plot.data.ta = rbind(a.ta, b.ta, c.ta, d.ta)
plot.data.te = rbind(a.te, b.te, c.te, d.te)
ggplot(plot.data.ta, aes(x=group, y=value)) +
geom_boxplot(col="red") +
geom_boxplot(plot.data.te,aes(x=group, y=value),col="green")
a.ta = data.frame(group = "LDA", value = lda_train)
b.ta = data.frame(group = "K.1", value = k.1_train)
c.ta = data.frame(group = "K.5", value = k.5_train)
d.ta = data.frame(group = "K.11", value = k.11_train)
a.te = data.frame(group = "LDA", value = lda_test)
b.te = data.frame(group = "K.1", value = k.1_test)
c.te = data.frame(group = "K.5", value = k.5_test)
d.te = data.frame(group = "K.11", value = k.11_test)
plot.data.ta = rbind(a.ta, b.ta, c.ta, d.ta)
plot.data.te = rbind(a.te, b.te, c.te, d.te)
ggplot(plot.data.ta, aes(x=group, y=value)) +
geom_boxplot(col="red")
+ geom_boxplot(plot.data.te,aes(x=group, y=value,col="green"))
a.ta = data.frame(group = "LDA", value = lda_train)
b.ta = data.frame(group = "K.1", value = k.1_train)
c.ta = data.frame(group = "K.5", value = k.5_train)
d.ta = data.frame(group = "K.11", value = k.11_train)
a.te = data.frame(group = "LDA", value = lda_test)
b.te = data.frame(group = "K.1", value = k.1_test)
c.te = data.frame(group = "K.5", value = k.5_test)
d.te = data.frame(group = "K.11", value = k.11_test)
plot.data.ta = rbind(a.ta, b.ta, c.ta, d.ta)
plot.data.te = rbind(a.te, b.te, c.te, d.te)
ggplot(plot.data.ta, aes(x=group, y=value)) +
geom_boxplot(col="red") + ggplot(plot.data.te,aes(x=group, y=value)) +
geom_boxplot(col="green")
a.ta = data.frame(group = "LDA", value = lda_train)
b.ta = data.frame(group = "K.1", value = k.1_train)
c.ta = data.frame(group = "K.5", value = k.5_train)
d.ta = data.frame(group = "K.11", value = k.11_train)
a.te = data.frame(group = "LDA", value = lda_test)
b.te = data.frame(group = "K.1", value = k.1_test)
c.te = data.frame(group = "K.5", value = k.5_test)
d.te = data.frame(group = "K.11", value = k.11_test)
plot.data.ta = rbind(a.ta, b.ta, c.ta, d.ta)
plot.data.te = rbind(a.te, b.te, c.te, d.te)
p <-ggplot(plot.data.ta, aes(x=group, y=value)) +
geom_boxplot(col="red")
p + geom_boxplot(plot.data.te,aes(x=group, y=value)) +
geom_boxplot(col="green")
a.ta = data.frame(group = "LDA", value = lda_train)
b.ta = data.frame(group = "K.1", value = k.1_train)
c.ta = data.frame(group = "K.5", value = k.5_train)
d.ta = data.frame(group = "K.11", value = k.11_train)
a.te = data.frame(group = "LDA", value = lda_test)
b.te = data.frame(group = "K.1", value = k.1_test)
c.te = data.frame(group = "K.5", value = k.5_test)
d.te = data.frame(group = "K.11", value = k.11_test)
plot.data.ta = rbind(a.ta, b.ta, c.ta, d.ta)
plot.data.te = rbind(a.te, b.te, c.te, d.te)
p <-ggplot(plot.data.ta, aes(x=group, y=value)) +
geom_boxplot(col="red")
p + geom_boxplot(plot.data.te, aes(x=group, y=value)) +
geom_boxplot(col="green")
View(a.ta)
a.ta = data.frame(group = "LDA", value = lda_train)
b.ta = data.frame(group = "K.1", value = k.1_train)
c.ta = data.frame(group = "K.5", value = k.5_train)
d.ta = data.frame(group = "K.11", value = k.11_train)
a.te = data.frame(group = "LDA", value = lda_test)
b.te = data.frame(group = "K.1", value = k.1_test)
c.te = data.frame(group = "K.5", value = k.5_test)
d.te = data.frame(group = "K.11", value = k.11_test)
plot.data.ta = rbind(a.ta, b.ta, c.ta, d.ta)
plot.data.te = rbind(a.te, b.te, c.te, d.te)
p <-ggplot(plot.data.ta, aes(x=group, y=value)) +
geom_boxplot(col="red")
p + geom_boxplot(plot.data.te, mapping = aes(x=group, y=value)) +
geom_boxplot(col="green")
a.ta = data.frame(group = "LDA", value = lda_train)
b.ta = data.frame(group = "K.1", value = k.1_train)
c.ta = data.frame(group = "K.5", value = k.5_train)
d.ta = data.frame(group = "K.11", value = k.11_train)
a.te = data.frame(group = "LDA", value = lda_test)
b.te = data.frame(group = "K.1", value = k.1_test)
c.te = data.frame(group = "K.5", value = k.5_test)
d.te = data.frame(group = "K.11", value = k.11_test)
plot.data.ta = rbind(a.ta, b.ta, c.ta, d.ta)
plot.data.te = rbind(a.te, b.te, c.te, d.te)
p <-ggplot(plot.data.ta, mapping = aes(x=group, y=value)) +
geom_boxplot(col="red")
p + geom_boxplot(plot.data.te, mapping = aes(x=group, y=value)) +
geom_boxplot(col="green")
a.ta = data.frame(group = "LDA", value = lda_train)
b.ta = data.frame(group = "K.1", value = k.1_train)
c.ta = data.frame(group = "K.5", value = k.5_train)
d.ta = data.frame(group = "K.11", value = k.11_train)
a.te = data.frame(group = "LDA", value = lda_test)
b.te = data.frame(group = "K.1", value = k.1_test)
c.te = data.frame(group = "K.5", value = k.5_test)
d.te = data.frame(group = "K.11", value = k.11_test)
plot.data.ta = rbind(a.ta, b.ta, c.ta, d.ta)
plot.data.te = rbind(a.te, b.te, c.te, d.te)
p <-ggplot(plot.data.ta, mapping = aes(x=group, y=value)) +
geom_boxplot(col="red")
p + geom_boxplot(plot.data.te, mapping = aes(x=group, y=value))
library(ggplot2); library(reshape)
#Plot train error rate
df_train <- data.frame(size, lda_train, k.1_train, k.5_train, k.11_train)
df_train.melted <- melt(df_train, id = "size")
ggplot(data = df_train.melted, aes(x = size, y = error_rate, color = variable)) +
geom_point()
library(ggplot2); library(reshape)
#Plot train error rate
df_train <- data.frame(size, lda_train, k.1_train, k.5_train, k.11_train)
df_train.melted <- melt(df_train, id = "size")
ggplot(data = df_train.melted, aes(x = size, y = value, color = variable)) +
geom_point()
#Plot test error rate
df_test <- data.frame(size, lda_test, k.1_test, k.5_test, k.11_test)
df_test.melted <- melt(df, id = "size")
ggplot(data = df_test.melted, aes(x = size, y = value, color = variable)) +
geom_point()
#Generate 1000 size data
data_size = 1000
my_sigma_1 = t(matrix(c(2,0.2,0.2,2)*0.6, ncol=2)) %*% matrix(c(2,0.2,0.2,2)*0.6, ncol=2)
my_sigma_2 = t(matrix(c(2,0.2,0.2,2), ncol=2)) %*% matrix(c(2,0.2,0.2,2), ncol=2)
data_0 = data.frame(rmvnorm(data_size, mean = rep(0, times = 2), sigma = my_sigma_1))
data_1 = data.frame(X1 = NA, X2 = NA)
count = 0
while(count < data_size){
new_draw = rmvnorm(1, mean = rep(0, times = 2), sigma = my_sigma_2)
if( sqrt( new_draw[,1]**2 + new_draw[,2]**2) >= 1.5 ) {
data_1 = rbind(data_1, data.frame(new_draw))
count = count + 1
}
}
data_1 = data_1[-1,]
cv_data = data.frame(rbind(data_0, data_1))
cv_data$class = as.factor(c(rep(0, times = data_size), rep(1, times = data_size)))
View(cv_data)
#Cross validation
for (i in 1:10) {
indices = c(200*(i-1):200*i)
training_set <- cv_data[-indices,]
testing_set <- cv_data[indices,]
}
#Cross validation
for (i in 1:10) {
indices = c(200*(i-1):200*i)
training_set <- cv_data[-(indices),]
testing_set <- cv_data[indices,]
}
View(training_set)
View(testing_set)
#Cross validation
for (i in 1:10) {
indices = c((200*(i-1)):(200*i))
training_set <- cv_data[-(indices),]
testing_set <- cv_data[indices,]
}
#Cross validation
for (i in 1:10) {
indices = c((200*(i-1)+1):(200*i))
training_set <- cv_data[-(indices),]
testing_set <- cv_data[indices,]
}
#Cross validatio
cv_lda = c(); cv_k.1 = c(); cv_k.5 = c(); cv_k.11 = c();
for (i in 1:10) {
indices = c((200*(i-1)+1):(200*i))
training_set <- cv_data[-(indices),]
testing_set <- cv_data[indices,]
#LDA
train_lda = lda(labels~., data = training_set)
test_predictions <- train_lda %>% predict(testing_set)
test_error = sum(test_predictions$class!=testing_set$class)/length(testing_set$class)
cv_lda = c(cv_lda,test_error)
#knn
library(class)
train_data_classifiers = as.factor(training_set$class)
train_data_observations = training_set[,-3]
test_data_observations = testing_set[,-3]
test_data_classifiers = as.factor(testing_set$class)
knn.1 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=1)
knn.1_risk = sum(test_data_classifiers != knn.1)/length(knn.1)
cv_k.1 = c(cv_k.1, knn.1_risk)
knn.5 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=5)
knn.5_risk = sum(test_data_classifiers != knn.5)/length(knn.5)
cv_k.5 = c(cv_k.5, knn.5_risk)
knn.11 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=11)
knn.11_risk = sum(test_data_classifiers != knn.11)/length(knn.11)
cv_k.11 = c(cv_k.11, knn.11_risk)
}
#Cross validatio
cv_lda = c(); cv_k.1 = c(); cv_k.5 = c(); cv_k.11 = c();
for (i in 1:10) {
indices = c((200*(i-1)+1):(200*i))
training_set <- cv_data[-(indices),]
testing_set <- cv_data[indices,]
#LDA
train_lda = lda(class~., data = training_set)
test_predictions <- train_lda %>% predict(testing_set)
test_error = sum(test_predictions$class!=testing_set$class)/length(testing_set$class)
cv_lda = c(cv_lda,test_error)
#knn
library(class)
train_data_classifiers = as.factor(training_set$class)
train_data_observations = training_set[,-3]
test_data_observations = testing_set[,-3]
test_data_classifiers = as.factor(testing_set$class)
knn.1 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=1)
knn.1_risk = sum(test_data_classifiers != knn.1)/length(knn.1)
cv_k.1 = c(cv_k.1, knn.1_risk)
knn.5 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=5)
knn.5_risk = sum(test_data_classifiers != knn.5)/length(knn.5)
cv_k.5 = c(cv_k.5, knn.5_risk)
knn.11 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=11)
knn.11_risk = sum(test_data_classifiers != knn.11)/length(knn.11)
cv_k.11 = c(cv_k.11, knn.11_risk)
}
lda_test[8]
# Print and compare the result
cv_lda = sum(cv_lda)/10; pre_lda = lda_test[8]
cv_k.1 = sum(cv_k.1)/10; pre_k.1 = k.1_test[8]
cv_k.5 = sum(cv_k.5)/10; pre_k.5 = k.5_test[8]
cv_k.11 = sum(cv_k.11)/10; pre_k.11 = k.11_test[8]
#Cross validatio
cv_lda = c(); cv_k.1 = c(); cv_k.5 = c(); cv_k.11 = c();
for (i in 1:10) {
indices = c((200*(i-1)+1):(200*i))
training_set <- cv_data[-(indices),]
testing_set <- cv_data[indices,]
#LDA
train_lda = lda(class~., data = training_set)
test_predictions <- train_lda %>% predict(testing_set)
test_error = sum(test_predictions$class!=testing_set$class)/length(testing_set$class)
cv_lda = c(cv_lda,test_error)
#knn
library(class)
train_data_classifiers = as.factor(training_set$class)
train_data_observations = training_set[,-3]
test_data_observations = testing_set[,-3]
test_data_classifiers = as.factor(testing_set$class)
knn.1 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=1)
knn.1_risk = sum(test_data_classifiers != knn.1)/length(knn.1)
cv_k.1 = c(cv_k.1, knn.1_risk)
knn.5 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=5)
knn.5_risk = sum(test_data_classifiers != knn.5)/length(knn.5)
cv_k.5 = c(cv_k.5, knn.5_risk)
knn.11 <-  knn(train_data_observations, test_data_observations, cl = train_data_classifiers, k=11)
knn.11_risk = sum(test_data_classifiers != knn.11)/length(knn.11)
cv_k.11 = c(cv_k.11, knn.11_risk)
}
# Print and compare the result
cv.lda = sum(cv_lda)/10; pre_lda = lda_test[8]
cv.k.1 = sum(cv_k.1)/10; pre_k.1 = k.1_test[8]
cv.k.5 = sum(cv_k.5)/10; pre_k.5 = k.5_test[8]
cv.k.11 = sum(cv_k.11)/10; pre_k.11 = k.11_test[8]
# Print and compare the result
cv.lda = sum(cv_lda)/10; pre_lda = lda_test[8]
cv.k.1 = sum(cv_k.1)/10; pre_k.1 = k.1_test[8]
cv.k.5 = sum(cv_k.5)/10; pre_k.5 = k.5_test[8]
cv.k.11 = sum(cv_k.11)/10; pre_k.11 = k.11_test[8]
print(paste0("For LDA, the CV error rate is ", cv.lda, ", the previous error rate is ", pre_lda, "."))
# Print and compare the result
cv.lda = sum(cv_lda)/10; pre_lda = lda_test[8]
cv.k.1 = sum(cv_k.1)/10; pre_k.1 = k.1_test[8]
cv.k.5 = sum(cv_k.5)/10; pre_k.5 = k.5_test[8]
cv.k.11 = sum(cv_k.11)/10; pre_k.11 = k.11_test[8]
print(paste0("For LDA, the CV error rate is ", cv.lda, ", the previous error rate is ", pre_lda, "."))
print(paste0("For Knn-1, the CV error rate is ", cv.k.1, ", the previous error rate is ", pre_k.1, "."))
print(paste0("For Knn-5, the CV error rate is ", cv.k.5, ", the previous error rate is ", pre_k.5, "."))
print(paste0("For Knn-11, the CV error rate is ", cv.k.11, ", the previous error rate is ", pre_k.11, "."))
lda.train = lda_train[8]; lda.test = lda_test[8]
k.1.train = k.1_train[8]; k.1.test = k.1_test[8]
k.5.train = k.5_train[8]; k.5.test = k.5_test[8]
k.11.train = k.11_train[8]; k.11.test = k.11_test[8]
print(paste0("For LDA, the train error rate is ", lda.train, ", the test error rate is ", lda.test, "."))
print(paste0("For Knn-1, the train error rate is ", k.1.train, ", the test error rate is ", k.1.test, "."))
print(paste0("For Knn-5, the train error rate is ", k.5.train, ", the test error rate is ", k.5.test, "."))
print(paste0("For Knn-11, the train error rate is ", k.11.train, ", the test error rate is ", k.11.test, "."))
library(ggplot)
library(ggplot2)
library(reshape)
#Plot train error rate
df_train <- data.frame(size, lda_train, k.1_train, k.5_train, k.11_train)
df_train.melted <- melt(df_train, id = "size")
ggplot(data = df_train.melted, aes(x = size, y = value, color = variable)) +
geom_point()
#Plot test error rate
df_test <- data.frame(size, lda_test, k.1_test, k.5_test, k.11_test)
df_test.melted <- melt(df, id = "size")
ggplot(data = df_test.melted, aes(x = size, y = value, color = variable)) +
geom_point()
setwd("~/FILES/UNC Course/STOR Major/STOR 565/4. Computing Assignments/Assignment 9/CA09")
library(knitr)
knit('CA09.Rmd', encoding = 'UTF-8')
library(knitr)
knit('CA09.docs', encoding = 'UTF-8')
?knit
library(knitr)
knit('CA09.Rmd', 'aaa.md' encoding = 'UTF-8')
library(knitr)
knit('CA09.Rmd', 'aaa.md', encoding = 'UTF-8')
library("knitr")
knit2word("file")
library("knitr")
knit2pdf("file")
knit2html('CA09.Rmd', 'aaa')
library("rmarkdown")
render("CA09.Rmd")
