# Load the data
fed = read.csv("Federalist.txt", header = TRUE)
# Have a look at the data
head(fed)
# Store the authorship vector separately
known = auths != "DIS" & auths != "COL"
View(fed)
# Load the data
fed = read.csv("Federalist.txt", header = TRUE)
# Have a look at the data
head(fed)
# Store the authorship vector separately
known = fed$Author != "DIS" & fed$Author != "COL"
auths = fed[, 2]
auths.known = fed[known, 2]
# Limit the data to known authors
fed.known = fed[known, -c(1,2)]
View(fed.known)
auths
auths.known
?prcomp
pc.fed = prcomp(fed.known, scale = TRUE)
View(pc.fed)
#Run principal components analysis
pc.fed = prcomp(fed.known, scale = TRUE)
#Summarize the PCA
summary(pc.fed)
#Run principal components analysis
pc.fed = prcomp(fed.known, scale = TRUE)
#Summarize the PCA
summary(pc.fed)
#Make scree plot
screeplot(pc.fed, type = "lines", main = "Variance explained by PC")
pairs(pc.fed$x[,1:3], col = auths.known, main = "Pairs Plot of First Three PCs")
#Individual Plots
##Partition the image space into a 2 x 2 grid
par(mfrow = c(2,2))
for(i in 1:3){
plot(pcs$x[,i],
main = paste("PC", eval(i)),
xlab = "Sample Index",
ylab = paste("PC", eval(i), "score"),
col = auths.known)
}
#Individual Plots
##Partition the image space into a 2 x 2 grid
par(mfrow = c(2,2))
for(i in 1:3){
plot(pc.fed$x[,i],
main = paste("PC", eval(i)),
xlab = "Sample Index",
ylab = paste("PC", eval(i), "score"),
col = auths.known)
}
#Pair Plots
pairs(pc.fed$x[,1:3], col = auths.known, main = "Pairs Plot of First Three PCs")
library(ggplot2)
set.seed(1)
km <- kmeans(pc.fed$x[,1:2], centers = 3)
ggplot(, aes(x = pc.fed$x[,1], y = pc.fed$x[,2])) +
geom_point(aes(col = as.factor(auths.known), pch = as.factor(km$cluster))) + xlab("First PC") + ylab("Second PC") +
scale_colour_discrete(name = "Author") + scale_shape_discrete(name = "Cluster") + geom_point(aes(x = km$centers[,1], y = km$centers[,2], pch = factor(1:3))) + ggtitle("Clusters of First Two PCs; Colored by Author")
irisf<-iris
irisf$Species<-NULL
m1<-kmeans(irisf,3)
m1
View(irisf)
View(km)
km
km
fed.disp = fed[auths == "DIS", -c(1,2)]
fed.collab = fed[auths == "COL", -c(1,2)]
disp.pred = predict(pc.fed, fed.disp)
collab.pred = predict(pc.fed, fed.collab)
View(fed.disp)
View(disp.pred)
View(collab.pred)
known.pred = predict(pc.fed$x[1:2],fed.known)
known.pred = predict(pc.fed$x[,1:2],fed.known)
known.pred = predict(pc.fed,fed.known)
View(known.pred)
plot(known.pred[,1:2],col=auths.known)
known.pred = predict(pc.fed, fed.known)
plot(known.pred[,1:2],col=auths.known)
# To add the collaborative papers
## NOTE: Make sure to run the 'plot' and 'legend' commands simultaneously.  It will NOT WORK
##       if you do it line by line.
all.classifiers = as.factor(c(as.character(auths.known), rep("COL", times =nrow(disp.pred))))
plot(rbind(pc.fed$x[,1:2], disp.pred[,1:2]), col = all.classifiers, main = "Plot of First Two PCs; Colored by Author with Collabs") legend(-10, 5,legend = c("AH", "COL", "JJ", "JM"), col = as.character(1:4), pch=rep(1, times = 4))
known.pred = predict(pc.fed, fed.known)
plot(known.pred[,1:2],col=auths.known)
# To add the collaborative papers
## NOTE: Make sure to run the 'plot' and 'legend' commands simultaneously.  It will NOT WORK
##       if you do it line by line.
all.classifiers = as.factor(c(as.character(auths.known), rep("COL", times =nrow(disp.pred))))
plot(rbind(pc.fed$x[,1:2], disp.pred[,1:2]), col = all.classifiers, main = "Plot of First Two PCs; Colored by Author with Collabs")
legend(-10, 5,legend = c("AH", "COL", "JJ", "JM"), col = as.character(1:4), pch=rep(1, times = 4))
known.pred = predict(pc.fed, fed.known)
plot(known.pred[,1:2],col=auths.known)
# To add the collaborative papers
## NOTE: Make sure to run the 'plot' and 'legend' commands simultaneously.  It will NOT WORK
##       if you do it line by line.
all.classifiers = as.factor(c(as.character(auths.known), rep("COL", times =nrow(collab.pred))))
plot(rbind(pc.fed$x[,1:2], disp.pred[,1:2]), col = all.classifiers, main = "Plot of First Two PCs; Colored by Author with Collabs")
legend(-10, 5,legend = c("AH", "COL", "JJ", "JM"), col = as.character(1:4), pch=rep(1, times = 4))
known.pred = predict(pc.fed, fed.known)
plot(known.pred[,1:2],col=auths.known)
# To add the collaborative papers
## NOTE: Make sure to run the 'plot' and 'legend' commands simultaneously.  It will NOT WORK
##       if you do it line by line.
all.classifiers = as.factor(c(as.character(auths.known), rep("COL", times =nrow(collab.pred))))
plot(rbind(pc.fed$x[,1:2], collab.pred[,1:2]), col = all.classifiers, main = "Plot of First Two PCs; Colored by Author with Collabs")
legend(-10, 5,legend = c("AH", "COL", "JJ", "JM"), col = as.character(1:4), pch=rep(1, times = 4))
all.classifiers = as.factor(c(as.character(auths.known), rep("DIS", times =nrow(disp.pred))))
plot(rbind(pc.fed$x[,1:2], disp.pred[,1:2]), col = all.classifiers, main = "Plot of First Two PCs; Colored by Author with Disputed")
legend(-10, 5,legend = c("AH", "DIS", "JJ", "JM"), col = as.character(1:4), pch=rep(1, times = 4))
known.pred = predict(pc.fed, fed.known)
plot(known.pred[,1:2],col=auths.known, main = "Plot of First Two PCs; Colored by Author with Known")
# To add the collaborative papers
## NOTE: Make sure to run the 'plot' and 'legend' commands simultaneously.  It will NOT WORK
##       if you do it line by line.
all.classifiers = as.factor(c(as.character(auths.known), rep("COL", times =nrow(collab.pred))))
plot(rbind(pc.fed$x[,1:2], collab.pred[,1:2]), col = all.classifiers, main = "Plot of First Two PCs; Colored by Author with Collabs")
legend(-10, 5,legend = c("AH", "COL", "JJ", "JM"), col = as.character(1:4), pch=rep(1, times = 4))
auths.known
known.pred = predict(pc.fed, fed.known)
plot(known.pred[,1:2],col=auths.known, main = "Plot of First Two PCs; Colored by Author with Known")
legend(-10, 5,legend = c("AH", "JJ", "JM"), col = as.character(1:3), pch=rep(1, times = 4))
# To add the collaborative papers
## NOTE: Make sure to run the 'plot' and 'legend' commands simultaneously.  It will NOT WORK
##       if you do it line by line.
all.classifiers = as.factor(c(as.character(auths.known), rep("COL", times =nrow(collab.pred))))
plot(rbind(pc.fed$x[,1:2], collab.pred[,1:2]), col = all.classifiers, main = "Plot of First Two PCs; Colored by Author with Collabs")
legend(-10, 5,legend = c("AH", "COL", "JJ", "JM"), col = as.character(1:4), pch=rep(1, times = 4))
known.pred = predict(pc.fed, fed.known)
plot(known.pred[,1:2],col=auths.known, main = "Plot of First Two PCs; Colored by Author with Known")
legend(-10, 5,legend = c("AH", "JJ", "JM"), col = auths.known, pch=rep(1, times = 4))
# To add the collaborative papers
## NOTE: Make sure to run the 'plot' and 'legend' commands simultaneously.  It will NOT WORK
##       if you do it line by line.
all.classifiers = as.factor(c(as.character(auths.known), rep("COL", times =nrow(collab.pred))))
plot(rbind(pc.fed$x[,1:2], collab.pred[,1:2]), col = all.classifiers, main = "Plot of First Two PCs; Colored by Author with Collabs")
legend(-10, 5,legend = c("AH", "COL", "JJ", "JM"), col = as.character(1:4), pch=rep(1, times = 4))
known.pred = predict(pc.fed, fed.known)
plot(known.pred[,1:2],col=auths.known, main = "Plot of First Two PCs; Colored by Author with Known")
legend(-10, 5,legend = c("AH", "JJ", "JM"), col = as.factor(as.character(auths.known)), pch=rep(1, times = 4))
# To add the collaborative papers
## NOTE: Make sure to run the 'plot' and 'legend' commands simultaneously.  It will NOT WORK
##       if you do it line by line.
all.classifiers = as.factor(c(as.character(auths.known), rep("COL", times =nrow(collab.pred))))
plot(rbind(pc.fed$x[,1:2], collab.pred[,1:2]), col = all.classifiers, main = "Plot of First Two PCs; Colored by Author with Collabs")
legend(-10, 5,legend = c("AH", "COL", "JJ", "JM"), col = as.character(1:4), pch=rep(1, times = 4))
known.pred = predict(pc.fed, fed.known)
plot(known.pred[,1:2],col=auths.known, main = "Plot of First Two PCs; Colored by Author with Known")
# To add the collaborative papers
## NOTE: Make sure to run the 'plot' and 'legend' commands simultaneously.  It will NOT WORK
##       if you do it line by line.
all.classifiers = as.factor(c(as.character(auths.known), rep("COL", times =nrow(collab.pred))))
plot(rbind(pc.fed$x[,1:2], collab.pred[,1:2]), col = all.classifiers, main = "Plot of First Two PCs; Colored by Author with Collabs")
legend(-10, 5,legend = c("AH", "COL", "JJ", "JM"), col = as.character(1:4), pch=rep(1, times = 4))
all.classifiers = as.factor(c(as.character(auths.known), rep("DIS", times =nrow(disp.pred))))
plot(rbind(pc.fed$x[,1:2], disp.pred[,1:2]), col = all.classifiers, main = "Plot of First Two PCs; Colored by Author with Disputed")
legend(-10, 5,legend = c("AH", "DIS", "JJ", "JM"), col = as.character(1:4), pch=rep(1, times = 4))
#Load the data
trial.sample = read.table("TCGA_sample.txt", header = TRUE)
#Store the subtypes of tissue and the gene expression data
Subtypes = trial.sample[,1]
Gene.Expression = as.matrix(trial.sample[,2:2001])
withinss = rep(NA, 20)
for(k in 1:20){
z = kmeans(Gene.Expression,k,iter.max = 100)
withinss[k] = z$tot.withinss
}
plot(withinss, xlab = "k", ylab = "WCSS", main = "k means on TCGA")
withinss[2]
withinss
kmeans(Gene.Expression,k,iter.max = 100)
kmeans(Gene.Expression,2,iter.max = 100)
k_2=kmeans(Gene.Expression,2,iter.max = 100)
k_2$cluster
View(k_2)
View(Gene.Expression)
# Load the data
fed = read.csv("Federalist.txt", header = TRUE)
# Have a look at the data
head(fed)
# Store the authorship vector separately
known = fed$Author != "DIS" & fed$Author != "COL"
auths = fed[, 2]
auths.known = fed[known, 2]
# Limit the data to known authors
fed.known = fed[known, -c(1,2)]
#Run principal components analysis
pc.fed = prcomp(fed.known, scale = TRUE)
#Summarize the PCA
summary(pc.fed)
#Make scree plot
screeplot(pc.fed, type = "lines", main = "Variance explained by PC")
#Individual Plots
##Partition the image space into a 2 x 2 grid
par(mfrow = c(2,2))
for(i in 1:3){
plot(pc.fed$x[,i],
main = paste("PC", eval(i)),
xlab = "Sample Index",
ylab = paste("PC", eval(i), "score"),
col = auths.known)
}
#Pair Plots
pairs(pc.fed$x[,1:3], col = auths.known, main = "Pairs Plot of First Three PCs")
library(ggplot2)
set.seed(1)
km <- kmeans(pc.fed$x[,1:2], centers = 3)
ggplot(, aes(x = pc.fed$x[,1], y = pc.fed$x[,2])) +
geom_point(aes(col = as.factor(auths.known), pch = as.factor(km$cluster))) + xlab("First PC") + ylab("Second PC") +
scale_colour_discrete(name = "Author") + scale_shape_discrete(name = "Cluster") + geom_point(aes(x = km$centers[,1], y = km$centers[,2], pch = factor(1:3))) + ggtitle("Clusters of First Two PCs; Colored by Author")
km
fed.disp = fed[auths == "DIS", -c(1,2)]
fed.collab = fed[auths == "COL", -c(1,2)]
disp.pred = predict(pc.fed, fed.disp)
collab.pred = predict(pc.fed, fed.collab)
known.pred = predict(pc.fed, fed.known)
plot(known.pred[,1:2],col=auths.known, main = "Plot of First Two PCs; Colored by Author with Known")
# To add the collaborative papers
## NOTE: Make sure to run the 'plot' and 'legend' commands simultaneously.  It will NOT WORK
##       if you do it line by line.
all.classifiers = as.factor(c(as.character(auths.known), rep("COL", times =nrow(collab.pred))))
plot(rbind(pc.fed$x[,1:2], collab.pred[,1:2]), col = all.classifiers, main = "Plot of First Two PCs; Colored by Author with Collabs")
legend(-10, 5,legend = c("AH", "COL", "JJ", "JM"), col = as.character(1:4), pch=rep(1, times = 4))
all.classifiers = as.factor(c(as.character(auths.known), rep("DIS", times =nrow(disp.pred))))
plot(rbind(pc.fed$x[,1:2], disp.pred[,1:2]), col = all.classifiers, main = "Plot of First Two PCs; Colored by Author with Disputed")
legend(-10, 5,legend = c("AH", "DIS", "JJ", "JM"), col = as.character(1:4), pch=rep(1, times = 4))
#Load the data
trial.sample = read.table("TCGA_sample.txt", header = TRUE)
#Store the subtypes of tissue and the gene expression data
Subtypes = trial.sample[,1]
Gene.Expression = as.matrix(trial.sample[,2:2001])
withinss = rep(NA, 20)
for(k in 1:20){
z = kmeans(Gene.Expression,k,iter.max = 100)
withinss[k] = z$tot.withinss
}
plot(withinss, xlab = "k", ylab = "WCSS", main = "k means on TCGA")
withinss[2]
Subtypes
k_2$cluster
count(k_2$cluster,vars=1)
library(plyr)
count(k_2$cluster,vars=1)
count(k_2$cluster)
count(k_2$cluster)[1,1]
count(k_2$cluster)[1,2]
count(k_2$cluster==1&Subtypes=='Normal')
k_2=kmeans(Gene.Expression,2,iter.max = 100)
k_2$cluster
library(plyr)
#Count Cluster 1 and 2
cluster_1 = count(k_2$cluster)[1,2]
cluster_2 = count(k_2$cluster)[2,2]
#Count 'Normal' and 'Basal'
cluster_1_Basal = count(k_2$cluster==1&Subtypes=='Basal')[2,2]
cluster_2_Basal = count(k_2$cluster==2&Subtypes=='Basal')[2,2]
cluster_1_Normal = count(k_2$cluster==1&Subtypes=='Normal')[2,2]
cluster_2_Normal = count(k_2$cluster==2&Subtypes=='Normal')[2,2]
count(k_2$cluster==2&Subtypes=='Basal')
count(k_2$cluster==1&Subtypes=='Normal')
count(k_2$cluster==2&Subtypes=='Normal')
count(k_2$cluster==1&Subtypes=='Basal')
cluster_2_Basal
k_2=kmeans(Gene.Expression,2,iter.max = 100)
library(plyr)
#Count Cluster 1 and 2
cluster_1 = count(k_2$cluster)[1,2]
cluster_2 = count(k_2$cluster)[2,2]
#Count 'Normal' and 'Basal'
cluster_1_Basal = count(k_2$cluster==1&Subtypes=='Basal')[2,2]
count(k_2$cluster==2&Subtypes=='Basal')[2,2]#NA
cluster_2_Basal = 0
cluster_1_Normal = count(k_2$cluster==1&Subtypes=='Normal')[2,2]
cluster_2_Normal = count(k_2$cluster==2&Subtypes=='Normal')[2,2]
print(paste("Cluster 1 contains 'Normal': ", cluster_1_Normal/cluster_1))
print(paste("Cluster 1 contains 'Basal': ", cluster_1_Basal/cluster_1))
print(paste("Cluster 2 contains 'Normal': ", cluster_2_Normal/cluster_2))
print(paste("Cluster 2 contains 'Basal': ", cluster_2_Basal/cluster_2))
pc.tcga = prcomp(Gene.Expression)
pc.tcga = prcomp(Gene.Expression)
gene.pred = predict(pc.tcga, Gene.Expression)
plot(gene.pred[,1:2],col=Subtypes, main = "Plot of First Two PCs; Colored by Subtypes")
plot(gene.pred[,1:2],col=k_2$cluster, main = "Plot of First Two PCs; Colored by Clusters")
gene.pred = predict(pc.tcga, Gene.Expression)
plot(gene.pred[,1:2],col=Subtypes, main = "Plot of First Two PCs; Colored by Subtypes")
par(new=TRUE)
plot(gene.pred[,1:2],col=k_2$cluster, main = "Plot of First Two PCs; Colored by Clusters")
par(new=FALSE)
plot(gene.pred[,1:2],col=k_2$cluster, main = "Plot of First Two PCs; Colored by Clusters")
plot(gene.pred[,1:2],col=Subtypes, main = "Plot of First Two PCs; Colored by Subtypes")
par(new=TRUE)
plot(gene.pred[,1:2],col=k_2$cluster, main = "Plot of First Two PCs; Colored by Clusters")
plot(gene.pred[,1:2],col=k_2$cluster, main = "Plot of First Two PCs; Colored by Clusters")
set.seed(1)
k.pca = kmeans(pc.tcga$x[,1:2], centers = 2)
plot(gene.pred[,1:2],col=k_2$cluster, main = "Plot of First Two PCs; Colored by Clusters")
k.pca$tot.withinss
withinss
View(k.pca)
# First, we create a dummy data set
random_data = data.frame(x = c(rnorm(1000, mean = 1), rnorm(1000, mean = 3)),
y = c(rnorm(1000, mean = 1), rnorm(1000, mean = 3)),
group = c(rep("Group 1", times = 1000), rep("Group 2", times = 1000)))
# This data set looks like:
ggplot(random_data, aes(x = x, y = y, col = group)) + geom_point() + ggtitle("Plot of Dummy Data")
# We'll perform the kmeans with two random centers:
random.km = kmeans(random_data[,1:2], centers = 2, iter.max = 1)
ggplot(random_data, aes(x = x, y = y, col = group, pch = as.factor(random.km$cluster))) + geom_point() +
scale_shape_discrete(name = "Cluster") + ggtitle("Plot of Dummy Data; Clustered")
# Which gives the following within-cluster sum of squares:
random.km$tot.withinss
my_centers = random_data[1:2, 1:2]
random.km = kmeans(random_data[,1:2], centers = my_centers, iter.max = 1)
ggplot(random_data, aes(x = x, y = y, col = group, pch = as.factor(random.km$cluster))) + geom_point() +
scale_shape_discrete(name = "Cluster") + ggtitle("Plot of Dummy Data; Clustered")
random.km$tot.withinss
my_centers
random_data[0:1,1999:2000]
random_data[1999:2000,0:1]
random_data[1999:2000,1:2]
my_centers = random_data[1999:2000, 1:2]
random.km = kmeans(random_data[,1:2], centers = my_centers, iter.max = 1)
ggplot(random_data, aes(x = x, y = y, col = group, pch = as.factor(random.km$cluster))) + geom_point() +
scale_shape_discrete(name = "Cluster") + ggtitle("Plot of Dummy Data; Clustered")
random.km$tot.withinss
my_centers = random_data[1999:2000, 2:3]
random.km = kmeans(random_data[,1:2], centers = my_centers, iter.max = 1)
my_centers = random_data[1999:2000, 1:2]
random.km = kmeans(random_data[,1:2], centers = my_centers, iter.max = 1)
ggplot(random_data, aes(x = x, y = y, col = group, pch = as.factor(random.km$cluster))) + geom_point() +
scale_shape_discrete(name = "Cluster") + ggtitle("Plot of Dummy Data; Clustered")
random.km$tot.withinss
my_centers = random_data[455:456, 1:2]
random.km = kmeans(random_data[,1:2], centers = my_centers, iter.max = 1)
ggplot(random_data, aes(x = x, y = y, col = group, pch = as.factor(random.km$cluster))) + geom_point() +
scale_shape_discrete(name = "Cluster") + ggtitle("Plot of Dummy Data; Clustered")
random.km$tot.withinss
